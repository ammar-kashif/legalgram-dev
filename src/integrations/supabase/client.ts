
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://xyxizdssuxacqexyomqq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh5eGl6ZHNzdXhhY3FleHlvbXFxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwMjgxNDcsImV4cCI6MjA1OTYwNDE0N30.6Ke8zKFPBPJQXHZewvJ1leWqopJf5qbiYmxKxcFpsjg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      flowType: 'pkce', // Using PKCE flow for better security and auto-session management
      storage: localStorage
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Enable replication for notifications table using proper channel subscription
const enableReplication = async () => {
  try {
    // Create a channel to subscribe to INSERT events on the notifications table
    const channel = supabase
      .channel('notifications_changes')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'notifications'
        },
        (payload) => {
          console.log('New notification:', payload);
        }
      )
      .subscribe((status) => {
        console.log(`Subscription status: ${status}`);
      });
      
    console.log('Replication enabled for notifications table');
    
    // Note: We're not returning the channel or subscription here,
    // as this is just to set up the initial subscription at app load
  } catch (error) {
    console.error('Error enabling replication:', error);
  }
};

// Call this function when the app loads
enableReplication();
